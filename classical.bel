% Classical logic using Peirce's law

i : type.

LF o : type =  % formulas
  | ⊃ : o → o → o
  | ⊤ : o
  | ∧   : o → o → o
  | ∨   : o → o → o
  | ¬  : o → o
  | ∀  : (i → o) → o
  | ∃  : (i → o) → o
;


--prefix ¬ 10.
--infix ∧ 6 right.
--infix ∨ 5 right.
--infix ⊃ 4 right.
--prefix ∀ 8.
--prefix ∃ 8.


% Classical Natural Deduction Rules
LF cnd : o → type = 
  % Natural Deduction
  | ⊃I : (cnd A → cnd B)
	 → cnd (A ⊃ B)
  | ⊃E : cnd (A ⊃ B) → cnd A
	 → cnd B
  | ∧I : cnd A → cnd B → cnd  (A ∧ B)
  | ∧El : cnd (A ∧ B) → cnd A
  | ∧Er : cnd (A ∧ B) → cnd B
  | ∨Il : cnd A → cnd (A ∨ B)
  | ∨Ir : cnd B → cnd (A ∨ B)
  | ∨E  : cnd (A ∨ B)
        → (cnd A → cnd C)
        → (cnd B → cnd C)        
        → cnd C
  | ⊤I : cnd ⊤

  % Negation
  | ¬I : ({p:o} cnd A → cnd p)
	 → cnd (¬ A)
	       
  | ¬E : cnd (¬ A) → cnd A
	 → cnd C
	       

  % First Order Logic
  | ∀I : ({a:i} cnd (A a)) 
	 → cnd (∀ (\x. A x))

  | ∀E : {T:i} cnd (∀ A) 
	 → cnd (A T)       

  | ∃I : {T:i} cnd (A T)           
	 → cnd (∃ A)

  | ∃E : cnd (∃ A)
	 → ({a:i} cnd (A a) → cnd C)
	 → cnd C

  % Peirce's Law
  % Maybe Correct TODO
  | PL: cnd ((A ⊃ B) ⊃ A) → cnd A


;


schema nctx = cnd A ;


% Proof Terms? TODO Ask Chuta
LF tm : o → type =
  | lam : (tm A → tm B) → tm (A ⊃ B)
  | app : tm (A ⊃ B) → tm A → tm B
  | pair: tm A → tm B → tm (A ∧ B)
  | fst : tm (A ∧ B) → tm A
  | snd : tm (A ∧ B) → tm B
  | inl : tm A → tm (A ∨ B)
  | inr : tm B → tm (A ∨ B)
  | cse : tm (A ∨ B)
        → (tm A → tm C)
        → (tm B → tm C)        
        → tm C
  | unit: tm ⊤

  % negation proof terms
  | lam-neg : ({p:o} tm A → tm p) → tm (¬ A)
  | app-neg : tm (¬ A) → tm A → tm C

  % for all proof terms
  | lam-all : ({a:i} tm (A a)) → tm (∀ (\x. A x)) 
  | app-all : {T:i} tm (∀ A) → tm (A T) 

  % existential proof terms
  | pair-exst : {T:i} tm (A T) → tm (∃ A)
  | let-val : tm (∃ A) → ({a:i} tm (A a) → tm C) → tm C 

  % Peirce's Law proof term
  | cont : tm ((A ⊃ B) ⊃ A) → tm A
;


% Alternate Proof Terms? TODO ask Chuta
LF tm2 : type =
  | app : tm2 → tm2 → tm2
  | lam : (tm2 → tm2) → tm2
  
  | pair : tm2 → tm2 → tm2
  | fst : tm2 → tm2
  | snd : tm2 → tm2

  | inl : tm2 → tm2
  | inr : tm2 → tm2
  | cse : tm2 → (tm2 → tm2) → (tm2 → tm2) → tm2

  | nil : tm2

  | let-val : tm2 → (tm2 → tm2) → tm2
;

% Use proof terms? connected to tm2 and cnd
LF pt : tm2 → o → type = 

  % Implication Intro x:A, M:B → lam x. M : A⊃B
  % Here we have (M x):B. It is saying M is the function body,and x is "applied" to it
  % so to extract the function body, lam M : A⊃B
  | ⊃Ip : ({x : tm2} pt x A → pt (M x) B)  → pt (lam M) (A ⊃ B)

  % Implication Elim M:A⊃B, N:A → M N: B
  | ⊃Ep : pt M (A ⊃ B) → pt N A → pt (app M N) B

  % | ∧I : cnd A → cnd B → cnd  (A ∧ B)
  % | ∧El : cnd (A ∧ B) → cnd A
  % | ∧Er : cnd (A ∧ B) → cnd B
  % | ∨Il : cnd A → cnd (A ∨ B)
  % | ∨Ir : cnd B → cnd (A ∨ B)
  % | ∨E  : cnd (A ∨ B)
  %       → (cnd A → cnd C)
  %       → (cnd B → cnd C)        
  %       → cnd C
  % | ⊤I : cnd ⊤

  % % Negation
  % | ¬I : ({p:o} nd A → nd p)
	%  → nd (¬ A)
	       
  % | ¬E : nd (¬ A) → nd A
	%  → nd C
	       

  % % First Order Logic
  % | ∀I : ({a:i} nd (A a)) 
	%  → nd (∀ (\x. A x))

  % | ∀E : {T:i} nd (∀ A) 
	%  → nd (A T)       

  % | ∃I : {T:i} nd (A T)           
	%  → nd (∃ A)

  % | ∃E : nd (∃ A)
	%  → ({a:i} nd (A a) → nd C)
	%  → nd C

  % % Peirce's Law
  % | PL: cnd ((A ⊃ B) ⊃ A) → cnd A

;